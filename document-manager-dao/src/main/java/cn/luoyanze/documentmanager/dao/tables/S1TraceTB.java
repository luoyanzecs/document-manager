/*
 * This file is generated by jOOQ.
 */
package cn.luoyanze.documentmanager.dao.tables;


import cn.luoyanze.documentmanager.dao.DocumentManager;
import cn.luoyanze.documentmanager.dao.Indexes;
import cn.luoyanze.documentmanager.dao.Keys;
import cn.luoyanze.documentmanager.dao.tables.records.S1TraceRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class S1TraceTB extends TableImpl<S1TraceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>document_manager.S1_TRACE</code>
     */
    public static final S1TraceTB S1_TRACE = new S1TraceTB();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<S1TraceRecord> getRecordType() {
        return S1TraceRecord.class;
    }

    /**
     * The column <code>document_manager.S1_TRACE.uuid</code>. traceid
     */
    public final TableField<S1TraceRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.CHAR(32).nullable(false), this, "traceid");

    /**
     * The column <code>document_manager.S1_TRACE.user_id</code>. 用户id
     */
    public final TableField<S1TraceRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "用户id");

    /**
     * The column <code>document_manager.S1_TRACE.url</code>. 请求路径
     */
    public final TableField<S1TraceRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(255).nullable(false), this, "请求路径");

    /**
     * The column <code>document_manager.S1_TRACE.store_request</code>. 请求body
     */
    public final TableField<S1TraceRecord, String> STORE_REQUEST = createField(DSL.name("store_request"), SQLDataType.CLOB, this, "请求body");

    /**
     * The column <code>document_manager.S1_TRACE.store_response</code>. 响应body
     */
    public final TableField<S1TraceRecord, String> STORE_RESPONSE = createField(DSL.name("store_response"), SQLDataType.CLOB, this, "响应body");

    /**
     * The column <code>document_manager.S1_TRACE.request_time</code>. 请求时间
     */
    public final TableField<S1TraceRecord, LocalDateTime> REQUEST_TIME = createField(DSL.name("request_time"), SQLDataType.LOCALDATETIME(0), this, "请求时间");

    /**
     * The column <code>document_manager.S1_TRACE.response_time</code>. 响应时间
     */
    public final TableField<S1TraceRecord, LocalDateTime> RESPONSE_TIME = createField(DSL.name("response_time"), SQLDataType.LOCALDATETIME(0), this, "响应时间");

    /**
     * The column <code>document_manager.S1_TRACE.internal</code>. 处理总时间
     */
    public final TableField<S1TraceRecord, Integer> INTERNAL = createField(DSL.name("internal"), SQLDataType.INTEGER, this, "处理总时间");

    private S1TraceTB(Name alias, Table<S1TraceRecord> aliased) {
        this(alias, aliased, null);
    }

    private S1TraceTB(Name alias, Table<S1TraceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>document_manager.S1_TRACE</code> table reference
     */
    public S1TraceTB(String alias) {
        this(DSL.name(alias), S1_TRACE);
    }

    /**
     * Create an aliased <code>document_manager.S1_TRACE</code> table reference
     */
    public S1TraceTB(Name alias) {
        this(alias, S1_TRACE);
    }

    /**
     * Create a <code>document_manager.S1_TRACE</code> table reference
     */
    public S1TraceTB() {
        this(DSL.name("S1_TRACE"), null);
    }

    public <O extends Record> S1TraceTB(Table<O> child, ForeignKey<O, S1TraceRecord> key) {
        super(child, key, S1_TRACE);
    }

    @Override
    public Schema getSchema() {
        return DocumentManager.DOCUMENT_MANAGER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.S1_TRACE_USER_ID);
    }

    @Override
    public UniqueKey<S1TraceRecord> getPrimaryKey() {
        return Keys.KEY_S1_TRACE_PRIMARY;
    }

    @Override
    public List<UniqueKey<S1TraceRecord>> getKeys() {
        return Arrays.<UniqueKey<S1TraceRecord>>asList(Keys.KEY_S1_TRACE_PRIMARY);
    }

    @Override
    public List<ForeignKey<S1TraceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<S1TraceRecord, ?>>asList(Keys.S1_TRACE_IBFK_1);
    }

    private transient S1UserTB _s1User;

    public S1UserTB s1User() {
        if (_s1User == null)
            _s1User = new S1UserTB(this, Keys.S1_TRACE_IBFK_1);

        return _s1User;
    }

    @Override
    public S1TraceTB as(String alias) {
        return new S1TraceTB(DSL.name(alias), this);
    }

    @Override
    public S1TraceTB as(Name alias) {
        return new S1TraceTB(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public S1TraceTB rename(String name) {
        return new S1TraceTB(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public S1TraceTB rename(Name name) {
        return new S1TraceTB(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, Integer, String, String, String, LocalDateTime, LocalDateTime, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
