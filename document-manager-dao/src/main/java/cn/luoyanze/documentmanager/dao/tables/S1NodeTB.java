/*
 * This file is generated by jOOQ.
 */
package cn.luoyanze.documentmanager.dao.tables;


import cn.luoyanze.documentmanager.dao.DocumentManager;
import cn.luoyanze.documentmanager.dao.Indexes;
import cn.luoyanze.documentmanager.dao.Keys;
import cn.luoyanze.documentmanager.dao.tables.records.S1NodeRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class S1NodeTB extends TableImpl<S1NodeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>document_manager.S1_NODE</code>
     */
    public static final S1NodeTB S1_NODE = new S1NodeTB();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<S1NodeRecord> getRecordType() {
        return S1NodeRecord.class;
    }

    /**
     * The column <code>document_manager.S1_NODE.uuid</code>. uuid, 由前端生成
     */
    public final TableField<S1NodeRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.CHAR(48).nullable(false), this, "uuid, 由前端生成");

    /**
     * The column <code>document_manager.S1_NODE.style</code>. dom样式
     */
    public final TableField<S1NodeRecord, String> STYLE = createField(DSL.name("style"), SQLDataType.VARCHAR(1024), this, "dom样式");

    /**
     * The column <code>document_manager.S1_NODE.class</code>. class
     */
    public final TableField<S1NodeRecord, String> CLASS = createField(DSL.name("class"), SQLDataType.VARCHAR(1024), this, "class");

    /**
     * The column <code>document_manager.S1_NODE.attribute</code>. 其他的attribute，json格式，map接收
     */
    public final TableField<S1NodeRecord, String> ATTRIBUTE = createField(DSL.name("attribute"), SQLDataType.VARCHAR(1024), this, "其他的attribute，json格式，map接收");

    /**
     * The column <code>document_manager.S1_NODE.tag</code>. html标签
     */
    public final TableField<S1NodeRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.CHAR(48), this, "html标签");

    /**
     * The column <code>document_manager.S1_NODE.type</code>. 节点类型
     */
    public final TableField<S1NodeRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CHAR(12).nullable(false), this, "节点类型");

    /**
     * The column <code>document_manager.S1_NODE.parentUUID</code>. 父节点id
     */
    public final TableField<S1NodeRecord, String> PARENTUUID = createField(DSL.name("parentUUID"), SQLDataType.CHAR(48), this, "父节点id");

    /**
     * The column <code>document_manager.S1_NODE.index</code>. 层级索引
     */
    public final TableField<S1NodeRecord, String> INDEX = createField(DSL.name("index"), SQLDataType.CHAR(255).nullable(false), this, "层级索引");

    /**
     * The column <code>document_manager.S1_NODE.text</code>. 文本内容
     */
    public final TableField<S1NodeRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.CLOB, this, "文本内容");

    /**
     * The column <code>document_manager.S1_NODE.hash</code>. hash值
     */
    public final TableField<S1NodeRecord, String> HASH = createField(DSL.name("hash"), SQLDataType.CHAR(32).nullable(false), this, "hash值");

    /**
     * The column <code>document_manager.S1_NODE.doc_id</code>. 文件id
     */
    public final TableField<S1NodeRecord, Integer> DOC_ID = createField(DSL.name("doc_id"), SQLDataType.INTEGER.nullable(false), this, "文件id");

    /**
     * The column <code>document_manager.S1_NODE.is_del</code>. 是否删除 1为删除 0为未删除
     */
    public final TableField<S1NodeRecord, Integer> IS_DEL = createField(DSL.name("is_del"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "是否删除 1为删除 0为未删除");

    /**
     * The column <code>document_manager.S1_NODE.last_time</code>. 上次修改时间
     */
    public final TableField<S1NodeRecord, LocalDateTime> LAST_TIME = createField(DSL.name("last_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "上次修改时间");

    private S1NodeTB(Name alias, Table<S1NodeRecord> aliased) {
        this(alias, aliased, null);
    }

    private S1NodeTB(Name alias, Table<S1NodeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>document_manager.S1_NODE</code> table reference
     */
    public S1NodeTB(String alias) {
        this(DSL.name(alias), S1_NODE);
    }

    /**
     * Create an aliased <code>document_manager.S1_NODE</code> table reference
     */
    public S1NodeTB(Name alias) {
        this(alias, S1_NODE);
    }

    /**
     * Create a <code>document_manager.S1_NODE</code> table reference
     */
    public S1NodeTB() {
        this(DSL.name("S1_NODE"), null);
    }

    public <O extends Record> S1NodeTB(Table<O> child, ForeignKey<O, S1NodeRecord> key) {
        super(child, key, S1_NODE);
    }

    @Override
    public Schema getSchema() {
        return DocumentManager.DOCUMENT_MANAGER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.S1_NODE_DOC_ID);
    }

    @Override
    public UniqueKey<S1NodeRecord> getPrimaryKey() {
        return Keys.KEY_S1_NODE_PRIMARY;
    }

    @Override
    public List<UniqueKey<S1NodeRecord>> getKeys() {
        return Arrays.<UniqueKey<S1NodeRecord>>asList(Keys.KEY_S1_NODE_PRIMARY);
    }

    @Override
    public List<ForeignKey<S1NodeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<S1NodeRecord, ?>>asList(Keys.S1_NODE_IBFK_1);
    }

    private transient S1DocTB _s1Doc;

    public S1DocTB s1Doc() {
        if (_s1Doc == null)
            _s1Doc = new S1DocTB(this, Keys.S1_NODE_IBFK_1);

        return _s1Doc;
    }

    @Override
    public S1NodeTB as(String alias) {
        return new S1NodeTB(DSL.name(alias), this);
    }

    @Override
    public S1NodeTB as(Name alias) {
        return new S1NodeTB(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public S1NodeTB rename(String name) {
        return new S1NodeTB(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public S1NodeTB rename(Name name) {
        return new S1NodeTB(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<String, String, String, String, String, String, String, String, String, String, Integer, Integer, LocalDateTime> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
