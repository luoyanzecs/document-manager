/*
 * This file is generated by jOOQ.
 */
package cn.luoyanze.documentmanager.dao.tables;


import cn.luoyanze.documentmanager.dao.DocumentManager;
import cn.luoyanze.documentmanager.dao.Keys;
import cn.luoyanze.documentmanager.dao.tables.records.S1ExceptionRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class S1ExceptionTB extends TableImpl<S1ExceptionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>document_manager.S1_EXCEPTION</code>
     */
    public static final S1ExceptionTB S1_EXCEPTION = new S1ExceptionTB();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<S1ExceptionRecord> getRecordType() {
        return S1ExceptionRecord.class;
    }

    /**
     * The column <code>document_manager.S1_EXCEPTION.primary_id</code>. 自增主键
     */
    public final TableField<S1ExceptionRecord, Integer> PRIMARY_ID = createField(DSL.name("primary_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "自增主键");

    /**
     * The column <code>document_manager.S1_EXCEPTION.time</code>. 时间
     */
    public final TableField<S1ExceptionRecord, LocalDateTime> TIME = createField(DSL.name("time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "时间");

    /**
     * The column <code>document_manager.S1_EXCEPTION.type</code>. 类型
     */
    public final TableField<S1ExceptionRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CHAR(10).nullable(false), this, "类型");

    /**
     * The column <code>document_manager.S1_EXCEPTION.ctx</code>. 内容
     */
    public final TableField<S1ExceptionRecord, String> CTX = createField(DSL.name("ctx"), SQLDataType.CLOB.nullable(false), this, "内容");

    private S1ExceptionTB(Name alias, Table<S1ExceptionRecord> aliased) {
        this(alias, aliased, null);
    }

    private S1ExceptionTB(Name alias, Table<S1ExceptionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>document_manager.S1_EXCEPTION</code> table reference
     */
    public S1ExceptionTB(String alias) {
        this(DSL.name(alias), S1_EXCEPTION);
    }

    /**
     * Create an aliased <code>document_manager.S1_EXCEPTION</code> table reference
     */
    public S1ExceptionTB(Name alias) {
        this(alias, S1_EXCEPTION);
    }

    /**
     * Create a <code>document_manager.S1_EXCEPTION</code> table reference
     */
    public S1ExceptionTB() {
        this(DSL.name("S1_EXCEPTION"), null);
    }

    public <O extends Record> S1ExceptionTB(Table<O> child, ForeignKey<O, S1ExceptionRecord> key) {
        super(child, key, S1_EXCEPTION);
    }

    @Override
    public Schema getSchema() {
        return DocumentManager.DOCUMENT_MANAGER;
    }

    @Override
    public Identity<S1ExceptionRecord, Integer> getIdentity() {
        return (Identity<S1ExceptionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<S1ExceptionRecord> getPrimaryKey() {
        return Keys.KEY_S1_EXCEPTION_PRIMARY;
    }

    @Override
    public List<UniqueKey<S1ExceptionRecord>> getKeys() {
        return Arrays.<UniqueKey<S1ExceptionRecord>>asList(Keys.KEY_S1_EXCEPTION_PRIMARY);
    }

    @Override
    public S1ExceptionTB as(String alias) {
        return new S1ExceptionTB(DSL.name(alias), this);
    }

    @Override
    public S1ExceptionTB as(Name alias) {
        return new S1ExceptionTB(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public S1ExceptionTB rename(String name) {
        return new S1ExceptionTB(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public S1ExceptionTB rename(Name name) {
        return new S1ExceptionTB(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, LocalDateTime, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
