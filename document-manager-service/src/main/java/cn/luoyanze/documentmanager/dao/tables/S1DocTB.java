/*
 * This file is generated by jOOQ.
 */
package cn.luoyanze.documentmanager.dao.tables;


import cn.luoyanze.documentmanager.dao.DocumentManager;
import cn.luoyanze.documentmanager.dao.Indexes;
import cn.luoyanze.documentmanager.dao.Keys;
import cn.luoyanze.documentmanager.dao.tables.records.S1DocRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class S1DocTB extends TableImpl<S1DocRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>document_manager.S1_DOC</code>
     */
    public static final S1DocTB S1_DOC = new S1DocTB();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<S1DocRecord> getRecordType() {
        return S1DocRecord.class;
    }

    /**
     * The column <code>document_manager.S1_DOC.primary_id</code>. 自增主键
     */
    public final TableField<S1DocRecord, Integer> PRIMARY_ID = createField(DSL.name("primary_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "自增主键");

    /**
     * The column <code>document_manager.S1_DOC.permission_bu</code>. 允许的部门
     */
    public final TableField<S1DocRecord, String> PERMISSION_BU = createField(DSL.name("permission_bu"), SQLDataType.CHAR(16), this, "允许的部门");

    /**
     * The column <code>document_manager.S1_DOC.authority</code>. 允许的等级
     */
    public final TableField<S1DocRecord, Integer> AUTHORITY = createField(DSL.name("authority"), SQLDataType.INTEGER, this, "允许的等级");

    /**
     * The column <code>document_manager.S1_DOC.status</code>. 状态 0已删除， 1正常
     */
    public final TableField<S1DocRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER.nullable(false), this, "状态 0已删除， 1正常");

    /**
     * The column <code>document_manager.S1_DOC.ctx</code>. 内容
     */
    public final TableField<S1DocRecord, String> CTX = createField(DSL.name("ctx"), SQLDataType.CLOB.nullable(false), this, "内容");

    /**
     * The column <code>document_manager.S1_DOC.user_id</code>. 创建用户id
     */
    public final TableField<S1DocRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "创建用户id");

    /**
     * The column <code>document_manager.S1_DOC.last_update_time</code>. 最近修改时间登录时间
     */
    public final TableField<S1DocRecord, LocalDateTime> LAST_UPDATE_TIME = createField(DSL.name("last_update_time"), SQLDataType.LOCALDATETIME(0), this, "最近修改时间登录时间");

    /**
     * The column <code>document_manager.S1_DOC.title</code>. 标题
     */
    public final TableField<S1DocRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "标题");

    /**
     * The column <code>document_manager.S1_DOC.dir_id</code>. 上级目录ID
     */
    public final TableField<S1DocRecord, Integer> DIR_ID = createField(DSL.name("dir_id"), SQLDataType.INTEGER.nullable(false), this, "上级目录ID");

    /**
     * The column <code>document_manager.S1_DOC.last_update_user_id</code>. 最近修改用户id
     */
    public final TableField<S1DocRecord, Integer> LAST_UPDATE_USER_ID = createField(DSL.name("last_update_user_id"), SQLDataType.INTEGER.nullable(false), this, "最近修改用户id");

    private S1DocTB(Name alias, Table<S1DocRecord> aliased) {
        this(alias, aliased, null);
    }

    private S1DocTB(Name alias, Table<S1DocRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>document_manager.S1_DOC</code> table reference
     */
    public S1DocTB(String alias) {
        this(DSL.name(alias), S1_DOC);
    }

    /**
     * Create an aliased <code>document_manager.S1_DOC</code> table reference
     */
    public S1DocTB(Name alias) {
        this(alias, S1_DOC);
    }

    /**
     * Create a <code>document_manager.S1_DOC</code> table reference
     */
    public S1DocTB() {
        this(DSL.name("S1_DOC"), null);
    }

    public <O extends Record> S1DocTB(Table<O> child, ForeignKey<O, S1DocRecord> key) {
        super(child, key, S1_DOC);
    }

    @Override
    public Schema getSchema() {
        return DocumentManager.DOCUMENT_MANAGER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.S1_DOC_DIR_ID, Indexes.S1_DOC_LAST_UPDATE_USER_ID, Indexes.S1_DOC_USER_ID);
    }

    @Override
    public Identity<S1DocRecord, Integer> getIdentity() {
        return (Identity<S1DocRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<S1DocRecord> getPrimaryKey() {
        return Keys.KEY_S1_DOC_PRIMARY;
    }

    @Override
    public List<UniqueKey<S1DocRecord>> getKeys() {
        return Arrays.<UniqueKey<S1DocRecord>>asList(Keys.KEY_S1_DOC_PRIMARY);
    }

    @Override
    public List<ForeignKey<S1DocRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<S1DocRecord, ?>>asList(Keys.S1_DOC_IBFK_1, Keys.S1_DOC_IBFK_2, Keys.S1_DOC_IBFK_3);
    }

    private transient S1UserTB _s1DocIbfk_1;
    private transient S1DirTB _s1Dir;
    private transient S1UserTB _s1DocIbfk_3;

    public S1UserTB s1DocIbfk_1() {
        if (_s1DocIbfk_1 == null)
            _s1DocIbfk_1 = new S1UserTB(this, Keys.S1_DOC_IBFK_1);

        return _s1DocIbfk_1;
    }

    public S1DirTB s1Dir() {
        if (_s1Dir == null)
            _s1Dir = new S1DirTB(this, Keys.S1_DOC_IBFK_2);

        return _s1Dir;
    }

    public S1UserTB s1DocIbfk_3() {
        if (_s1DocIbfk_3 == null)
            _s1DocIbfk_3 = new S1UserTB(this, Keys.S1_DOC_IBFK_3);

        return _s1DocIbfk_3;
    }

    @Override
    public S1DocTB as(String alias) {
        return new S1DocTB(DSL.name(alias), this);
    }

    @Override
    public S1DocTB as(Name alias) {
        return new S1DocTB(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public S1DocTB rename(String name) {
        return new S1DocTB(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public S1DocTB rename(Name name) {
        return new S1DocTB(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, Integer, Integer, String, Integer, LocalDateTime, String, Integer, Integer> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
