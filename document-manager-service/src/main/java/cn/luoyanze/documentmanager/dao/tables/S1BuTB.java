/*
 * This file is generated by jOOQ.
 */
package cn.luoyanze.documentmanager.dao.tables;


import cn.luoyanze.documentmanager.dao.DocumentManager;
import cn.luoyanze.documentmanager.dao.Keys;
import cn.luoyanze.documentmanager.dao.tables.records.S1BuRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class S1BuTB extends TableImpl<S1BuRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>document_manager.S1_BU</code>
     */
    public static final S1BuTB S1_BU = new S1BuTB();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<S1BuRecord> getRecordType() {
        return S1BuRecord.class;
    }

    /**
     * The column <code>document_manager.S1_BU.primary_id</code>. 自增主键
     */
    public final TableField<S1BuRecord, UInteger> PRIMARY_ID = createField(DSL.name("primary_id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "自增主键");

    /**
     * The column <code>document_manager.S1_BU.name</code>. 部门名称
     */
    public final TableField<S1BuRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CHAR(16).nullable(false), this, "部门名称");

    private S1BuTB(Name alias, Table<S1BuRecord> aliased) {
        this(alias, aliased, null);
    }

    private S1BuTB(Name alias, Table<S1BuRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>document_manager.S1_BU</code> table reference
     */
    public S1BuTB(String alias) {
        this(DSL.name(alias), S1_BU);
    }

    /**
     * Create an aliased <code>document_manager.S1_BU</code> table reference
     */
    public S1BuTB(Name alias) {
        this(alias, S1_BU);
    }

    /**
     * Create a <code>document_manager.S1_BU</code> table reference
     */
    public S1BuTB() {
        this(DSL.name("S1_BU"), null);
    }

    public <O extends Record> S1BuTB(Table<O> child, ForeignKey<O, S1BuRecord> key) {
        super(child, key, S1_BU);
    }

    @Override
    public Schema getSchema() {
        return DocumentManager.DOCUMENT_MANAGER;
    }

    @Override
    public Identity<S1BuRecord, UInteger> getIdentity() {
        return (Identity<S1BuRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<S1BuRecord> getPrimaryKey() {
        return Keys.KEY_S1_BU_PRIMARY;
    }

    @Override
    public List<UniqueKey<S1BuRecord>> getKeys() {
        return Arrays.<UniqueKey<S1BuRecord>>asList(Keys.KEY_S1_BU_PRIMARY);
    }

    @Override
    public S1BuTB as(String alias) {
        return new S1BuTB(DSL.name(alias), this);
    }

    @Override
    public S1BuTB as(Name alias) {
        return new S1BuTB(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public S1BuTB rename(String name) {
        return new S1BuTB(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public S1BuTB rename(Name name) {
        return new S1BuTB(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UInteger, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
