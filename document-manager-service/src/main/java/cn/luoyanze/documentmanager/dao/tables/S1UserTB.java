/*
 * This file is generated by jOOQ.
 */
package cn.luoyanze.documentmanager.dao.tables;


import cn.luoyanze.documentmanager.dao.DocumentManager;
import cn.luoyanze.documentmanager.dao.Keys;
import cn.luoyanze.documentmanager.dao.tables.records.S1UserRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class S1UserTB extends TableImpl<S1UserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>document_manager.S1_USER</code>
     */
    public static final S1UserTB S1_USER = new S1UserTB();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<S1UserRecord> getRecordType() {
        return S1UserRecord.class;
    }

    /**
     * The column <code>document_manager.S1_USER.primary_id</code>. 自增主键
     */
    public final TableField<S1UserRecord, UInteger> PRIMARY_ID = createField(DSL.name("primary_id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "自增主键");

    /**
     * The column <code>document_manager.S1_USER.account</code>. 用户账号
     */
    public final TableField<S1UserRecord, String> ACCOUNT = createField(DSL.name("account"), SQLDataType.CHAR(16).nullable(false), this, "用户账号");

    /**
     * The column <code>document_manager.S1_USER.password</code>. 用户密码
     */
    public final TableField<S1UserRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.CHAR(16).nullable(false), this, "用户密码");

    /**
     * The column <code>document_manager.S1_USER.role</code>. 角色
     */
    public final TableField<S1UserRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.CHAR(10).nullable(false), this, "角色");

    /**
     * The column <code>document_manager.S1_USER.avatar</code>. 用户头像
     */
    public final TableField<S1UserRecord, String> AVATAR = createField(DSL.name("avatar"), SQLDataType.CHAR(255), this, "用户头像");

    /**
     * The column <code>document_manager.S1_USER.tel</code>. 电话
     */
    public final TableField<S1UserRecord, String> TEL = createField(DSL.name("tel"), SQLDataType.CHAR(16), this, "电话");

    /**
     * The column <code>document_manager.S1_USER.email</code>. 电邮
     */
    public final TableField<S1UserRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.CHAR(32), this, "电邮");

    /**
     * The column <code>document_manager.S1_USER.last_login_time</code>. 最近一次登录时间
     */
    public final TableField<S1UserRecord, LocalDateTime> LAST_LOGIN_TIME = createField(DSL.name("last_login_time"), SQLDataType.LOCALDATETIME(0), this, "最近一次登录时间");

    /**
     * The column <code>document_manager.S1_USER.register_time</code>. 注册时间
     */
    public final TableField<S1UserRecord, LocalDateTime> REGISTER_TIME = createField(DSL.name("register_time"), SQLDataType.LOCALDATETIME(0), this, "注册时间");

    /**
     * The column <code>document_manager.S1_USER.status</code>. 在职状态， 在职1， 不在职0
     */
    public final TableField<S1UserRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER.nullable(false), this, "在职状态， 在职1， 不在职0");

    /**
     * The column <code>document_manager.S1_USER.bu</code>. 用户部门
     */
    public final TableField<S1UserRecord, String> BU = createField(DSL.name("bu"), SQLDataType.CHAR(16).nullable(false), this, "用户部门");

    /**
     * The column <code>document_manager.S1_USER.authority</code>. 权限等级
     */
    public final TableField<S1UserRecord, Integer> AUTHORITY = createField(DSL.name("authority"), SQLDataType.INTEGER.nullable(false), this, "权限等级");

    private S1UserTB(Name alias, Table<S1UserRecord> aliased) {
        this(alias, aliased, null);
    }

    private S1UserTB(Name alias, Table<S1UserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>document_manager.S1_USER</code> table reference
     */
    public S1UserTB(String alias) {
        this(DSL.name(alias), S1_USER);
    }

    /**
     * Create an aliased <code>document_manager.S1_USER</code> table reference
     */
    public S1UserTB(Name alias) {
        this(alias, S1_USER);
    }

    /**
     * Create a <code>document_manager.S1_USER</code> table reference
     */
    public S1UserTB() {
        this(DSL.name("S1_USER"), null);
    }

    public <O extends Record> S1UserTB(Table<O> child, ForeignKey<O, S1UserRecord> key) {
        super(child, key, S1_USER);
    }

    @Override
    public Schema getSchema() {
        return DocumentManager.DOCUMENT_MANAGER;
    }

    @Override
    public Identity<S1UserRecord, UInteger> getIdentity() {
        return (Identity<S1UserRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<S1UserRecord> getPrimaryKey() {
        return Keys.KEY_S1_USER_PRIMARY;
    }

    @Override
    public List<UniqueKey<S1UserRecord>> getKeys() {
        return Arrays.<UniqueKey<S1UserRecord>>asList(Keys.KEY_S1_USER_PRIMARY);
    }

    @Override
    public S1UserTB as(String alias) {
        return new S1UserTB(DSL.name(alias), this);
    }

    @Override
    public S1UserTB as(Name alias) {
        return new S1UserTB(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public S1UserTB rename(String name) {
        return new S1UserTB(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public S1UserTB rename(Name name) {
        return new S1UserTB(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<UInteger, String, String, String, String, String, String, LocalDateTime, LocalDateTime, Integer, String, Integer> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
